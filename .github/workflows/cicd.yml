name: CI/CD Builds

on:
  push:
    branches:
      - "**"
    paths-ignore:
      - docs/**.md

jobs:
  python_build_and_test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version:
          - 3.7
          - 3.8
    steps:
      - name: Clone git repo
        uses: actions/checkout@v1
      - name: "Print Version Info (build #${{ github.run_number }})"
        run: |
          echo "Build Number: $GITHUB_RUN_NUMBER
          echo "Version:      $(cat VERSION).$GITHUB_RUN_NUMBER"
          echo "Run ID:       ${{ github.run_id }}"
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies (python pip)
        run: |
          python3 -m pip install --upgrade pip
          pip3 install flake8 pytest
      - name: Install tapdance
        run: |
          python3 setup.py install
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # - name: Test with pytest
      #   run: |
      #     pytest

  pypi_publish:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version:
          - 3.7
    needs:
      - python_build_and_test
    steps:
      - name: Clone git repo
        uses: actions/checkout@v1
      - name: Set up Python (v${{ matrix.python-version }})
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Push to PyPi (https://pypi.org/project/tapdance/)
        env:
          BRANCH_NAME: ${{ github.ref }}
          PYPI_USER: ${{ secrets.PYPI_USER }}
          PYPI_PASS: ${{ secrets.PYPI_SECRET }}
        run: |
          echo -e "Installing twine...\n\n"
          pip install twine
          echo -e "\nCreating setup package...\n\n"
          python setup.py sdist
          echo -e "\nPublishing to version ref '$VERSION'...\n\n"
          twine upload -u $PYPI_USER -p $PYPI_PASS dist/*
      - name: Sleep before install
        run: |
          sleep 60
      - name: Test install (pip install tapdance)
        run: |
          pip install tapdance==$(cat VERSION) --pre
      - name: Test CLI shortcuts
        run: |
          set -v
          tapdance -- --help
      - name: Test uninstall (pip uninstall tapdance)
        run: |
          pip uninstall -y tapdance

  docker_builds:
    runs-on: ubuntu-latest
    needs:
      - pypi_publish
    steps:
      - name: Clone git repo
        uses: actions/checkout@v1
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install tapdance
        run: python3 setup.py install
      - name: Login to docker
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_SECRET }}
      - name: Build and push all *prioritized* pre-release singer images
        run: |
          cd docker
          tapdance build_image covid-19 s3-csv --pre --push
          tapdance build_image covid-19 redshift --pre --push
          tapdance build_image covid-19 postgres --pre --push
      - name: Build and push all pre-release singer images
        run: cd docker && tapdance build_all_images --pre --push
      - name: Print list of images
        run: docker image ls
